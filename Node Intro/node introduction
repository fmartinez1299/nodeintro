const fs = require('fs');
const axios = require('axios');
const process = require('process');

// Helper function to write data to a file
function writeToFile(filename, data) {
  fs.writeFile(filename, data, 'utf8', (err) => {
    if (err) {
      console.error(`Couldn't write ${filename}:`);
      console.error(err.message);
      process.exit(1);
    }
  });
}

// Function to read from a file
function cat(path, writePath = null) {
  fs.readFile(path, 'utf8', (err, data) => {
    if (err) {
      console.error(`Error reading ${path}:`);
      console.error(err.message);
      process.exit(1);
    }
    if (writePath) {
      writeToFile(writePath, data);
    } else {
      console.log(data);
    }
  });
}

// Function to fetch data from a URL
async function webCat(url, writePath = null) {
  try {
    const response = await axios.get(url);
    if (writePath) {
      writeToFile(writePath, response.data);
    } else {
      console.log(response.data);
    }
  } catch (err) {
    console.error(`Error fetching ${url}:`);
    console.error(err.message);
    process.exit(1);
  }
}

// Main function to process command-line arguments
function main() {
  const args = process.argv.slice(2);

  if (args.length === 0) {
    console.error("Usage: node node-cat.js [--out <output-file>] <file-or-url> ...");
    process.exit(1);
  }

  let outputFile = null;
  let inputs = [];

  // Check for `--out` flag
  if (args[0] === '--out') {
    if (args.length < 3) {
      console.error("Usage: node node-cat.js --out <output-file> <file-or-url> ...");
      process.exit(1);
    }
    outputFile = args[1];
    inputs = args.slice(2);
  } else {
    inputs = args;
  }

  // Process each input (file or URL)
  for (const input of inputs) {
    if (input.startsWith('http')) {
      webCat(input, outputFile);
    } else {
      cat(input, outputFile);
    }
  }
}

// Run the main function
main();
